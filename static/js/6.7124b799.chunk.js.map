{"version":3,"sources":["hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","hooks/useGetLotteryHasDrawn.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnAssetCard.tsx","views/Home/components/WinCard.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","utils/lotteryUtils.ts","hooks/useTickets.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","hooks/useBuyLottery.ts","hooks/useAllowance.ts","../node_modules/lodash/max.js"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","Block","styled","div","CakeHarvestBalance","t","useTranslation","earningsSum","reduce","accum","earning","earningNumber","eq","DEFAULT_TOKEN_DECIMAL","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","scale","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","lotteryContract","useLottery","getLotteryStatus","state","fetchLotteryStatus","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","console","error","TicketsList","props","primary","WarningModal","onDismiss","title","ModalActions","StyledSpacer","spacing","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TicketInput","max","symbol","availableSymbol","onChange","onSelectMax","alignItems","type","inputMode","min","placeholder","num","toLocaleString","BuyTicketModal","amount","val","setVal","setRequestedBuy","fullBalance","useMemo","maxTickets","parseInt","getFullDisplayBalance","LOTTERY_TICKET_PRICE","onMultiBuy","useMultiBuyLottery","maxNumber","useMaxNumber","handleBuy","numbers","Array","apply","Math","floor","random","toString","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","e","currentTarget","validity","valid","Tips","Announce","Final","variant","isInteger","CakeWinnings","claimAmount","cakeAmount","claimAmountBusd","LotteryJackpot","bold","StyledLotteryCard","LotteryCard","requestClaim","setRequestedClaim","allowance","useLotteryAllowance","useModal","PurchaseWarningModal","useTotalClaim","setLastUpdated","onMultiClaim","useMultiClaimLottery","handleClaim","onPresentBuy","marginRight","StyledCakeStats","Row","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","fetch","response","json","responseData","fetchData","useGetStats","tvl","total_value_locked_all","maximumFractionDigits","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPRCard","farmsLP","useFarms","prices","useGetApiPrices","cakePrice","highestApr","aprs","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","getAddress","quoteToken","toLowerCase","totalLiquidity","times","getFarmApr","poolWeight","maxApr","exact","activeClassName","to","animation","justifyContent","mt","activeNonCakePools","pools","pool","isFinished","earningToken","includes","latestPools","orderBy","slice","assets","join","EarnAssetCard","WinCard","Hero","Cards","BaseLayout","sm","CTACards","Home","Page","as","FarmStakingCard","slowRefresh","setTotalSupply","cakeContract","getCakeContract","methods","call","supply","fetchTotalSupply","tokenAddress","BIG_ZERO","web3","useWeb3","contract","getBep20Contract","balanceOf","fetchBalance","useGetBnbBalance","useLastUpdated","lastUpdated","eth","getBalance","walletBalance","refresh","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","multiCall","abi","getWeb3NoAccount","multi","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","i","newCalls","calldata","encodeFunctionData","aggregate","returnData","concat","decodeFunctionResult","multiBuy","price","numbersList","send","from","on","tx","transactionHash","getTickets","ticketsContract","customLotteryNum","issueIndex","getTicketsAmount","calls1","options","ticketAbi","tokenIds","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","tickets","multiClaim","claimedStatus","unClaimedIds","lotteryAbi","rewards","finalTokenIds","r","getTotalClaim","drawed","calls4","claim","p","c","sum","getTotalRewards","getMax","getLotteryIssueIndex","getMatchingRewardLength","matchNumber","historyAmount","getWinningNumbers","historyNumbers","winningNumbers","setClaimAmount","claimLoading","setClaimLoading","useLotteryTicket","useWinningNumbers","setWinningNumbers","useTickets","lotteryNumber","setTickets","size","Spacer","s","useContext","ThemeContext","StyledModalActions","primaryDark","StyledModalAction","children","l","React","Children","toArray","child","lotteryTicketContract","txHash","setMax","fetchMax","setAllowance","useCake","getLotteryAddress","fetchAllowance","useIfoAllowance","tokenContract","spenderAddress","dependency","baseExtremum","require","baseGt","identity","module","exports","array"],"mappings":"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","file":"static/js/6.7124b799.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useTranslation } from 'contexts/Localization'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    const earningNumber = new BigNumber(earning)\n    if (earningNumber.eq(0)) {\n      return accum\n    }\n    return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const { t } = useTranslation()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { useTranslation } from 'contexts/Localization'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('CAKE to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{t('CAKE in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? t('Collecting CAKE')\n                : t('Harvest all (%count%)', {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import { useEffect, useState } from 'react'\nimport { useLottery } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const lotteryContract = useLottery()\n\n  useEffect(() => {\n    if (lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","import { useCallback, useState } from 'react'\nimport { useLotteryApprove } from './useApprove'\n\nexport const useApproval = (onPresentApprove: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useLotteryApprove()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n      onPresentApprove()\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, onPresentApprove])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport default useApproval\n","import React from 'react'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const { t } = useTranslation()\n\n  return (\n    <Modal title={t('Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {t('Lottery ticket purchases are final.')}\n        <br />\n        {t('Your CAKE will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {t('Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {t(\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button width=\"100%\" onClick={onDismiss}>\n          {t('I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button, Flex, Input, InputProps } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  value: string\n  onSelectMax?: () => void\n  onChange: (evt: React.FormEvent<HTMLInputElement>) => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Flex alignItems=\"center\">\n        <Input type=\"number\" inputMode=\"numeric\" min=\"0\" onChange={onChange} placeholder=\"0\" value={value} />\n        <StyledTokenAdornmentWrapper>\n          <StyledSpacer />\n          <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n          <StyledSpacer />\n          <Button scale=\"sm\" onClick={onSelectMax}>\n            {t('Max')}\n          </Button>\n        </StyledTokenAdornmentWrapper>\n      </Flex>\n      <StyledMaxText>\n        {t('%num% %symbol% Available', { num: max.toLocaleString(), symbol: availableSymbol })}\n      </StyledMaxText>\n    </>\n  )\n}\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap/uikit'\nimport { getBalanceNumber, getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport { useTranslation } from 'contexts/Localization'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onDismiss?: () => void\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getBalanceNumber(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    if (e.currentTarget.validity.valid) {\n      setVal(e.currentTarget.value)\n    }\n  }\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={t('Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"CAKE\"\n      />\n      <div>\n        <Tips>{t(`1 Ticket = ${LOTTERY_TICKET_PRICE} CAKE`, { num: LOTTERY_TICKET_PRICE })}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {t('Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.')}\n        </Announce>\n        <Final>{t('You will spend: %amount% CAKE', { amount: cakeCosts(val) })}</Final>\n      </div>\n      <ModalActions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          width=\"100%\"\n          disabled={\n            pendingTx ||\n            !Number.isInteger(parseInt(val)) ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n","import React from 'react'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Text } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { BigNumber } from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\ninterface CakeWinningsProps {\n  claimAmount: BigNumber\n}\n\nconst CakeWinnings: React.FC<CakeWinningsProps> = ({ claimAmount }) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const cakeAmount = getBalanceNumber(claimAmount)\n  const cakePriceBusd = usePriceCakeBusd()\n  const claimAmountBusd = new BigNumber(cakeAmount).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {t('Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={cakeAmount} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={claimAmountBusd} decimals={2} />}\n    </Block>\n  )\n}\n\nexport default CakeWinnings\n","import React from 'react'\nimport { Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nconst LotteryJackpot = () => {\n  const { t } = useTranslation()\n\n  return (\n    <>\n      <Text bold fontSize=\"24px\" style={{ lineHeight: '1.5' }}>\n        {t('Coming Soon')}\n      </Text>\n      <br />\n    </>\n  )\n}\n\nexport default LotteryJackpot\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { useLotteryAllowance } from 'hooks/useAllowance'\nimport { useApproval } from 'hooks/useApproval'\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\nimport BuyTicketModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeWinnings from './CakeWinnings'\nimport LotteryJackpot from './LotteryJackpot'\n\nconst StyledLotteryCard = styled(Card)`\n  background-image: url('/images/ticket-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  display: flex;\n  margin-top: 24px;\n  button {\n    flex: 1 0 50%;\n  }\n`\n\nconst LotteryCard = () => {\n  const { account } = useWeb3React()\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const [requestClaim, setRequestedClaim] = useState(false)\n  const { t } = useTranslation()\n  const allowance = useLotteryAllowance()\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const { claimAmount, setLastUpdated } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n        setLastUpdated()\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiClaim, setRequestedClaim, setLastUpdated])\n\n  const renderLotteryTicketButtonBuyOrApprove = () => {\n    if (!allowance.toNumber()) {\n      return (\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n          {t('Approve CAKE')}\n        </Button>\n      )\n    }\n    if (lotteryHasDrawn) {\n      return <Button disabled> {t('On sale soon')}</Button>\n    }\n    return (\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy}>\n        {t('Buy Tickets')}\n      </Button>\n    )\n  }\n\n  const [onPresentBuy] = useModal(<BuyTicketModal max={cakeBalance} />)\n\n  return (\n    <StyledLotteryCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Your Lottery Winnings')}\n        </Heading>\n        <CardImage src=\"/images/ticket.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{t('CAKE to Collect')}:</Label>\n          <CakeWinnings claimAmount={claimAmount} />\n        </Block>\n        <Block>\n          <Label>{t('Total jackpot this round')}:</Label>\n          <LotteryJackpot />\n        </Block>\n        {account ? (\n          <Actions>\n            <Button\n              id=\"dashboard-collect-winnings\"\n              disabled={getBalanceNumber(claimAmount) === 0 || requestClaim}\n              onClick={handleClaim}\n              style={{ marginRight: '8px' }}\n            >\n              {t('Collect Winnings')}\n            </Button>\n            {renderLotteryTicketButtonBuyOrApprove()}\n          </Actions>\n        ) : (\n          <Actions>\n            <UnlockButton width=\"100%\" />\n          </Actions>\n        )}\n      </CardBody>\n    </StyledLotteryCard>\n  )\n}\n\nexport default LotteryCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport { useTranslation } from 'contexts/Localization'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const { t } = useTranslation()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {t('Cake Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total CAKE Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('Total CAKE Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{t('New CAKE/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={20} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const { t } = useTranslation()\n  const data = useGetStats()\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"24px\">\n          {t('Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading scale=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{t('Across all LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/*\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\n\n/* eslint-disable camelcase */\n\nexport interface ApiTvlResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<ApiTvlResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`${baseUrl}/tvl`)\n        const responseData: ApiTvlResponse = await response.json()\n\n        setData(responseData)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\nimport BigNumber from 'bignumber.js'\nimport { getFarmApr } from 'utils/apr'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPRCard = () => {\n  const { t } = useTranslation()\n  const { data: farmsLP } = useFarms()\n  const prices = useGetApiPrices()\n  const cakePrice = usePriceCakeBusd()\n\n  const highestApr = useMemo(() => {\n    const aprs = farmsLP\n      // Filter inactive farms, because their theoretical APR is super high. In practice, it's 0.\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n      .map((farm) => {\n        if (farm.lpTotalInQuoteToken && prices) {\n          const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address).toLowerCase()]\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n          return getFarmApr(farm.poolWeight, cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n    const maxApr = max(aprs)\n    return maxApr?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }, [cakePrice, farmsLP, prices])\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apr-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            Earn up to\n          </Heading>\n          <CardMidContent color=\"#7645d9\">\n            {highestApr ? `${highestApr}% ${t('APR')}` : <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />}\n          </CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              in Farms\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPRCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport orderBy from 'lodash/orderBy'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport pools from 'config/constants/pools'\nimport { Pool } from 'state/types'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background: linear-gradient(#53dee9, #7645d9);\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\n\nconst activeNonCakePools = pools.filter((pool) => !pool.isFinished && !pool.earningToken.symbol.includes('CAKE'))\nconst latestPools: Pool[] = orderBy(activeNonCakePools, ['sortOrder', 'pid'], ['desc', 'desc']).slice(0, 3)\n// Always include CAKE\nconst assets = ['CAKE', ...latestPools.map((pool) => pool.earningToken.symbol)].join(', ')\n\nconst EarnAssetCard = () => {\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/syrup\" id=\"pool-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            Earn\n          </Heading>\n          <CardMidContent color=\"invertedContrast\">{assets}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\">\n              in Pools\n            </Heading>\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAssetCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap/uikit'\nimport { NavLink } from 'react-router-dom'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n\n  transition: opacity 200ms;\n  &:hover {\n    opacity: 0.65;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ scale: 'xl' })`\n  line-height: 44px;\n`\nconst WinCard = () => {\n  const { t } = useTranslation()\n\n  return (\n    <StyledFarmStakingCard>\n      <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n        <CardBody>\n          <Heading color=\"contrast\" scale=\"lg\">\n            {t('Lottery')}\n          </Heading>\n          <CardMidContent color=\"#7645d9\">{t('Coming Soon')}</CardMidContent>\n          <Flex justifyContent=\"space-between\">\n            <Heading color=\"contrast\" scale=\"lg\" />\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </Flex>\n        </CardBody>\n      </NavLink>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default WinCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap/uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const { t } = useTranslation()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n          {t('PancakeSwap')}\n        </Heading>\n        <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <LotteryCard />\n        </Cards>\n        <CTACards>\n          <EarnAPRCard />\n          <EarnAssetCard />\n          <WinCard />\n        </CTACards>\n        <Cards>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport const useGetBnbBalance = () => {\n  const [balance, setBalance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const walletBalance = await web3.eth.getBalance(account)\n      setBalance(new BigNumber(walletBalance))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, web3, lastUpdated, setBalance])\n\n  return { balance, refresh: setLastUpdated }\n}\n\nexport default useTokenBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap/uikit'\n\nexport interface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  lineHeight?: string\n  prefix?: string\n  bold?: boolean\n  color?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({\n  value,\n  decimals,\n  fontSize = '40px',\n  lineHeight = '1',\n  prefix = '',\n  bold = true,\n  color = 'text',\n}) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\n      {prefix}\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport CardValue, { CardValueProps } from './CardValue'\n\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\n  return (\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"textSubtle\" prefix=\"~$\" bold={false} decimals={2} {...props} />\n  )\n}\n\nexport default CardBusdValue\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3NoAccount } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { DEFAULT_TOKEN_DECIMAL, LOTTERY_TICKET_PRICE } from 'config'\nimport { AbiItem } from 'web3-utils'\nimport { getMulticallAddress } from './addressHelpers'\nimport { BIG_ZERO } from './bigNumber'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3NoAccount()\n  const multi = new web3.eth.Contract(MultiCallAbi as unknown as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(DEFAULT_TOKEN_DECIMAL).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIndex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (new BigNumber(ticketIssue).eq(issueIndex)) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finalTokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finalTokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finalTokenIds.length > 200) {\n    finalTokenIds = finalTokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finalTokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIndex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length } as unknown[]).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenIds = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIndex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenIds.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BIG_ZERO)\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BIG_ZERO\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIndex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIndex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIndex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIndex, 5 - matchNumber).call()\n\n    return new BigNumber(amount).div(DEFAULT_TOKEN_DECIMAL).div(LOTTERY_TICKET_PRICE).toNumber()\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIndex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIndex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\nimport useLastUpdated from './useLastUpdated'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWeb3React()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(BIG_ZERO)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(BIG_ZERO)\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWeb3React()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { lastUpdated, setLastUpdated } = useLastUpdated()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract, lastUpdated])\n\n  return { claimLoading, claimAmount, setLastUpdated }\n}\n\nexport const useWinningNumbers = () => {\n  const [winningNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winningNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport default useTickets\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px 0;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n`\n\nexport default ModalActions\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWeb3React()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { getLotteryAddress } from 'utils/addressHelpers'\nimport { BIG_ZERO } from 'utils/bigNumber'\nimport { useCake } from './useContract'\nimport useRefresh from './useRefresh'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n  const { account } = useWeb3React()\n  const cakeContract = useCake()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await cakeContract.methods.allowance(account, getLotteryAddress()).call()\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchAllowance()\n    }\n  }, [account, cakeContract, fastRefresh])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any): BigNumber => {\n  const { account } = useWeb3React()\n  const [allowance, setAllowance] = useState(BIG_ZERO)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        console.error(e)\n      }\n    }\n\n    if (account) {\n      fetch()\n    }\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    identity = require('./identity');\n\n/**\n * Computes the maximum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * _.max([4, 2, 8, 6]);\n * // => 8\n *\n * _.max([]);\n * // => undefined\n */\nfunction max(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseGt)\n    : undefined;\n}\n\nmodule.exports = max;\n"],"sourceRoot":""}